(*#line 51.10 "parser.lex"*)functor SteadyCheckLexFun(structure Tokens : SteadyCheck_TOKENS)(*#line 1.1 "parser.lex.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "parser.lex"*)(* -*- sml-lex -*-
 * ml.lex
 *
 * Copyright 1989 by AT&T Bell Laboratories
 *)

structure TokTable = TokenTable(Tokens);

type svalue = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type pos = int
type lexresult= (svalue, pos) token

type arg =
     {
       comLevel : int ref,
       commonOperations : ParserUtil.PositionMap.operations,
       error : (string * int * int) -> unit,
       stringBuf : string list ref,
       stringStart : pos ref,
       stringType : bool ref
     }

fun addString (buf, s) = buf := (s::(!buf))
fun addChar (buf, s) = buf := (Char.toString s)::(!buf)
fun makeString (buf) = concat (rev (!buf)) before buf := nil

val eof = fn ({comLevel, error, stringStart, ...}:arg) =>
             let
               val pos = !stringStart+2
             in
               if 0 < !comLevel
               then error ("unclosed comment", !stringStart, pos)
               else ();
               Tokens.EOF(pos,pos)
             end

local
  fun cvt radix (s, i) =
      #1(valOf(Int.scan radix Substring.getc (Substring.triml i (Substring.substring(s,0, Substring.size (Substring.full s))))))
      handle Overflow => ((* print "overflow ignored.\n"; *) 0)
in
val atoi = cvt StringCvt.DEC
val xtoi = cvt StringCvt.HEX
end (* local *)
fun inc (ri as ref i) = (ri := i+1)
fun dec (ri as ref i) = (ri := i-1)
(*#line 53.1 "parser.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\010\010\010\010\010\010\010\010\010\072\075\010\072\074\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\072\027\071\068\027\027\027\063\061\060\058\027\057\027\054\027\
\\046\044\044\044\044\044\044\044\044\044\027\043\027\027\027\027\
\\027\029\029\029\029\029\029\029\029\029\029\029\029\029\029\029\
\\029\029\029\029\029\029\029\029\029\029\029\042\027\041\027\032\
\\031\029\029\029\029\029\029\029\029\029\029\029\029\029\029\029\
\\029\029\029\029\029\029\029\029\029\029\029\028\027\026\011\010\
\\009"
),
 (3, 
"\076\076\076\076\076\076\076\076\076\076\082\076\076\081\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\079\076\077\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\076\
\\076"
),
 (5, 
"\105\105\105\105\105\105\105\105\105\105\108\105\105\106\105\105\
\\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\
\\083\084\104\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\085\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\083\
\\083"
),
 (7, 
"\109\109\109\109\109\109\109\109\109\111\114\109\111\113\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\111\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\110\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\012\000\012\012\012\012\000\000\000\012\012\000\012\000\012\
\\023\014\014\014\014\014\014\014\014\014\012\000\012\012\012\012\
\\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
\\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\012\000\012\012\012\012\000\000\000\012\012\000\012\000\012\
\\000\000\000\000\000\000\000\000\000\000\012\000\012\012\012\012\
\\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
\\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\013\000\013\013\013\013\000\000\000\013\013\000\013\000\013\
\\000\000\000\000\000\000\000\000\000\000\013\000\013\013\013\013\
\\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\013\000\013\000\
\\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\013\000\013\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\019\019\019\019\019\019\019\019\019\019\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\019\019\019\019\019\019\019\019\019\019\000\000\000\000\000\000\
\\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\022\022\022\022\022\022\022\022\022\022\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\022\022\022\022\022\022\022\022\022\022\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\\014\014\014\014\014\014\014\014\014\014\000\000\000\000\000\000\
\\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\025\025\025\025\025\025\025\025\025\025\000\000\000\000\000\000\
\\000\025\025\025\025\025\025\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\025\025\025\025\025\025\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\000\
\\030\030\030\030\030\030\030\030\030\030\000\000\000\000\000\000\
\\000\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\
\\030\030\030\030\030\030\030\030\030\030\030\000\000\000\000\030\
\\000\030\030\030\030\030\030\030\030\030\030\030\030\030\030\030\
\\030\030\030\030\030\030\030\030\030\030\030\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\035\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\\045\045\045\045\045\045\045\045\045\045\000\000\000\000\000\000\
\\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\\053\053\053\053\053\053\053\053\053\053\000\000\000\000\000\000\
\\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\049\047\000\000\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\048\048\048\048\048\048\048\048\048\048\000\000\000\000\000\000\
\\000\048\048\048\048\048\048\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\048\048\048\048\048\048\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\052\052\052\052\052\052\052\052\052\052\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\050\000\000\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\051\051\051\051\051\051\051\051\051\051\000\000\000\000\000\000\
\\000\051\051\051\051\051\051\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\051\051\051\051\051\051\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\052\052\052\052\052\052\052\052\052\052\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\\053\053\053\053\053\053\053\053\053\053\000\000\000\000\000\000\
\\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\012\000\012\012\012\012\000\000\059\012\012\000\012\000\012\
\\000\000\000\000\000\000\000\000\000\000\012\000\012\012\012\012\
\\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
\\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\067\000\000\000\000\000\000\000\000\
\\066\066\066\066\066\066\066\066\066\066\000\000\000\000\000\000\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\065\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\064\000\000\000\000\000\000\000\000\
\\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\000\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\064\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\066\066\066\066\066\066\066\066\066\066\000\000\000\000\000\000\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\066\066\066\066\066\066\066\066\066\066\000\000\000\000\000\000\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\065\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\012\070\012\012\012\012\000\000\000\012\012\000\012\000\012\
\\000\000\000\000\000\000\000\000\000\000\012\000\012\012\012\012\
\\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\069\012\000\012\000\
\\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
\\000"
),
 (72, 
"\000\000\000\000\000\000\000\000\000\073\000\000\073\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\073\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\000\075\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\078\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\080\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (84, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\084\000\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\000\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\
\\084\084\084\084\084\084\084\084\084\084\084\084\084\084\084\000\
\\000"
),
 (85, 
"\000\000\000\000\000\000\000\000\000\101\103\000\101\102\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\101\000\100\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\097\097\097\097\097\097\097\097\097\097\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\096\000\093\000\
\\000\092\091\000\000\000\090\000\000\000\000\000\000\000\089\000\
\\000\000\088\000\087\000\086\000\000\000\000\000\000\000\000\000\
\\000"
),
 (93, 
"\094\094\094\094\094\094\094\094\094\094\000\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\095\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094"
),
 (97, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\098\098\098\098\098\098\098\098\098\098\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (98, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\099\099\099\099\099\099\099\099\099\099\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (101, 
"\000\000\000\000\000\000\000\000\000\101\000\000\101\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\101\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (102, 
"\000\000\000\000\000\000\000\000\000\000\103\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (106, 
"\000\000\000\000\000\000\000\000\000\000\107\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (111, 
"\000\000\000\000\000\000\000\000\000\112\000\000\112\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\112\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (113, 
"\000\000\000\000\000\000\000\000\000\000\114\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [(N 2)], trans = 1},
{fin = [(N 2)], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [(N 246)], trans = 7},
{fin = [(N 246)], trans = 7},
{fin = [(N 140),(N 142)], trans = 0},
{fin = [(N 142)], trans = 0},
{fin = [(N 66),(N 75),(N 142)], trans = 11},
{fin = [(N 66),(N 75)], trans = 12},
{fin = [(N 66)], trans = 13},
{fin = [(N 105)], trans = 14},
{fin = [], trans = 15},
{fin = [], trans = 16},
{fin = [(N 95)], trans = 16},
{fin = [], trans = 18},
{fin = [(N 95)], trans = 19},
{fin = [], trans = 20},
{fin = [], trans = 21},
{fin = [(N 95)], trans = 21},
{fin = [(N 105)], trans = 23},
{fin = [], trans = 24},
{fin = [(N 116)], trans = 24},
{fin = [(N 25),(N 142)], trans = 0},
{fin = [(N 66),(N 75),(N 142)], trans = 12},
{fin = [(N 23),(N 142)], trans = 0},
{fin = [(N 55),(N 142)], trans = 29},
{fin = [(N 55)], trans = 29},
{fin = [(N 66),(N 142)], trans = 13},
{fin = [(N 19),(N 142)], trans = 32},
{fin = [], trans = 33},
{fin = [], trans = 34},
{fin = [], trans = 35},
{fin = [], trans = 36},
{fin = [], trans = 37},
{fin = [], trans = 38},
{fin = [], trans = 39},
{fin = [(N 17)], trans = 0},
{fin = [(N 32),(N 142)], trans = 0},
{fin = [(N 27),(N 142)], trans = 0},
{fin = [(N 34),(N 142)], trans = 0},
{fin = [(N 98),(N 101),(N 142)], trans = 44},
{fin = [(N 98),(N 101)], trans = 44},
{fin = [(N 101),(N 142)], trans = 46},
{fin = [], trans = 47},
{fin = [(N 110)], trans = 47},
{fin = [], trans = 49},
{fin = [], trans = 50},
{fin = [(N 127)], trans = 50},
{fin = [(N 121)], trans = 52},
{fin = [(N 101)], trans = 53},
{fin = [(N 40),(N 142)], trans = 54},
{fin = [], trans = 55},
{fin = [(N 44)], trans = 0},
{fin = [(N 21),(N 142)], trans = 0},
{fin = [(N 66),(N 75),(N 142)], trans = 58},
{fin = [(N 138)], trans = 0},
{fin = [(N 38),(N 142)], trans = 0},
{fin = [(N 36),(N 142)], trans = 61},
{fin = [(N 135)], trans = 0},
{fin = [(N 142)], trans = 63},
{fin = [(N 52)], trans = 64},
{fin = [], trans = 65},
{fin = [], trans = 66},
{fin = [], trans = 67},
{fin = [(N 66),(N 75),(N 142)], trans = 68},
{fin = [(N 30)], trans = 0},
{fin = [(N 132)], trans = 0},
{fin = [(N 129),(N 142)], trans = 0},
{fin = [(N 2),(N 142)], trans = 72},
{fin = [(N 2)], trans = 72},
{fin = [(N 7),(N 142)], trans = 74},
{fin = [(N 7)], trans = 0},
{fin = [(N 155)], trans = 0},
{fin = [(N 155)], trans = 77},
{fin = [(N 153)], trans = 0},
{fin = [(N 155)], trans = 79},
{fin = [(N 145)], trans = 0},
{fin = [(N 150),(N 155)], trans = 81},
{fin = [(N 150)], trans = 0},
{fin = [(N 238)], trans = 0},
{fin = [(N 238)], trans = 84},
{fin = [(N 172),(N 214),(N 238)], trans = 85},
{fin = [(N 193)], trans = 0},
{fin = [(N 190)], trans = 0},
{fin = [(N 187)], trans = 0},
{fin = [(N 184)], trans = 0},
{fin = [(N 181)], trans = 0},
{fin = [(N 178)], trans = 0},
{fin = [(N 175)], trans = 0},
{fin = [], trans = 93},
{fin = [(N 207)], trans = 0},
{fin = [(N 203),(N 207)], trans = 0},
{fin = [(N 196)], trans = 0},
{fin = [], trans = 97},
{fin = [], trans = 98},
{fin = [(N 212)], trans = 0},
{fin = [(N 199)], trans = 0},
{fin = [(N 172)], trans = 101},
{fin = [(N 168)], trans = 102},
{fin = [(N 168)], trans = 0},
{fin = [(N 157),(N 238)], trans = 0},
{fin = [(N 216),(N 238)], trans = 0},
{fin = [(N 162),(N 216),(N 238)], trans = 106},
{fin = [(N 162)], trans = 0},
{fin = [(N 162),(N 216)], trans = 0},
{fin = [(N 250)], trans = 0},
{fin = [(N 248),(N 250)], trans = 0},
{fin = [(N 246),(N 250)], trans = 111},
{fin = [(N 246)], trans = 111},
{fin = [(N 243),(N 250)], trans = 113},
{fin = [(N 243)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val A = STARTSTATE 3;
val F = STARTSTATE 7;
val INITIAL = STARTSTATE 1;
val S = STARTSTATE 5;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex (yyarg as ((*#line 52.7 "parser.lex"*)arg as 
{
  comLevel,
  commonOperations = {onNewLine, ...},
  error,
  stringBuf,
  stringStart,
  stringType
} : 
{
  comLevel : int ref,
  commonOperations : ParserUtil.PositionMap.operations,
  error : (string * int * int) -> unit,
  stringBuf : string list ref,
  stringStart : int ref,
  stringType : bool ref
}(*#line 871.1 "parser.lex.sml"*)
)) =
let fun continue() : Internal.result = 
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			fun REJECT() = action(i,acts::l)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  101 => let val yytext=yymktext() in (*#line 106.20 "parser.lex"*)Tokens.INT0(atoi(yytext, 0),yypos,yypos+size yytext)(*#line 888.1 "parser.lex.sml"*)
 end
| 105 => let val yytext=yymktext() in (*#line 107.21 "parser.lex"*)Tokens.INT0(atoi(yytext, 0),yypos,yypos+size yytext)(*#line 890.1 "parser.lex.sml"*)
 end
| 110 => let val yytext=yymktext() in (*#line 109.18 "parser.lex"*)Tokens.INT0(xtoi(yytext, 2),yypos,yypos+size yytext)(*#line 892.1 "parser.lex.sml"*)
 end
| 116 => let val yytext=yymktext() in (*#line 111.18 "parser.lex"*)Tokens.INT0(Int.~(xtoi(yytext, 3)),yypos,yypos+size yytext)(*#line 894.1 "parser.lex.sml"*)
 end
| 121 => let val yytext=yymktext() in (*#line 112.24 "parser.lex"*)Tokens.WORD(atoi(yytext, 2),yypos,yypos+size yytext)(*#line 896.1 "parser.lex.sml"*)
 end
| 127 => let val yytext=yymktext() in (*#line 114.18 "parser.lex"*)Tokens.WORD(xtoi(yytext, 3),yypos,yypos+size yytext)(*#line 898.1 "parser.lex.sml"*)
 end
| 129 => ((*#line 115.17 "parser.lex"*)stringBuf := [""]; stringStart := yypos;
                    stringType := true; YYBEGIN S; continue()(*#line 901.1 "parser.lex.sml"*)
)
| 132 => ((*#line 117.19 "parser.lex"*)stringBuf := [""]; stringStart := yypos;
                    stringType := false; YYBEGIN S; continue()(*#line 904.1 "parser.lex.sml"*)
)
| 135 => ((*#line 120.18 "parser.lex"*)YYBEGIN A; stringStart := yypos; comLevel := 1; continue()(*#line 906.1 "parser.lex.sml"*)
)
| 138 => ((*#line 121.19 "parser.lex"*)error ("unmatched close comment",yypos,yypos+1);
                    continue()(*#line 909.1 "parser.lex.sml"*)
)
| 140 => ((*#line 123.17 "parser.lex"*)error ("non-Ascii character",yypos,yypos); continue()(*#line 911.1 "parser.lex.sml"*)
)
| 142 => let val yytext=yymktext() in (*#line 124.16 "parser.lex"*)error ("illegal token(" ^ yytext ^ ")",yypos,yypos+1);
                    continue()(*#line 914.1 "parser.lex.sml"*)
 end
| 145 => ((*#line 126.14 "parser.lex"*)inc comLevel; continue()(*#line 916.1 "parser.lex.sml"*)
)
| 150 => ((*#line 127.14 "parser.lex"*)onNewLine yypos; continue()(*#line 918.1 "parser.lex.sml"*)
)
| 153 => ((*#line 128.13 "parser.lex"*)
             dec comLevel;
             if !comLevel=0 then YYBEGIN INITIAL else ();
             continue()
           (*#line 924.1 "parser.lex.sml"*)
)
| 155 => ((*#line 133.11 "parser.lex"*)continue()(*#line 926.1 "parser.lex.sml"*)
)
| 157 => ((*#line 135.19 "parser.lex"*)let
                      val s = makeString stringBuf
(*
                      val s = if size s <> 1 andalso not(!stringType)
                              then (error
                                    (
                                      "character constant not length 1",
                                      !stringStart, yypos
                                    );
                                    substring(s^"x",0,1))
                              else s
*)
                      val t = (s,!stringStart,yypos+1)
                    in
                      YYBEGIN INITIAL;
                      if !stringType then Tokens.STRING t else Tokens.CHAR t
                    end(*#line 944.1 "parser.lex.sml"*)
)
| 162 => ((*#line 152.14 "parser.lex"*)error ("unclosed string",!stringStart,yypos);
		    onNewLine yypos;
		    YYBEGIN INITIAL;
                    Tokens.STRING(makeString stringBuf,!stringStart,yypos)(*#line 949.1 "parser.lex.sml"*)
)
| 168 => ((*#line 156.21 "parser.lex"*)onNewLine (yypos+1);YYBEGIN F; continue()(*#line 951.1 "parser.lex.sml"*)
)
| 17 => let val yytext=yymktext() in (*#line 86.26 "parser.lex"*)Tokens.OVERLOAD(yypos,yypos+size yytext)(*#line 953.1 "parser.lex.sml"*)
 end
| 172 => ((*#line 157.18 "parser.lex"*)YYBEGIN F; continue()(*#line 955.1 "parser.lex.sml"*)
)
| 175 => ((*#line 158.13 "parser.lex"*)addString(stringBuf, "\007"); continue()(*#line 957.1 "parser.lex.sml"*)
)
| 178 => ((*#line 159.13 "parser.lex"*)addString(stringBuf, "\008"); continue()(*#line 959.1 "parser.lex.sml"*)
)
| 181 => ((*#line 160.13 "parser.lex"*)addString(stringBuf, "\012"); continue()(*#line 961.1 "parser.lex.sml"*)
)
| 184 => ((*#line 161.13 "parser.lex"*)addString(stringBuf, "\010"); continue()(*#line 963.1 "parser.lex.sml"*)
)
| 187 => ((*#line 162.13 "parser.lex"*)addString(stringBuf, "\013"); continue()(*#line 965.1 "parser.lex.sml"*)
)
| 19 => ((*#line 87.18 "parser.lex"*)Tokens.WILD(yypos,yypos+1)(*#line 967.1 "parser.lex.sml"*)
)
| 190 => ((*#line 163.13 "parser.lex"*)addString(stringBuf, "\009"); continue()(*#line 969.1 "parser.lex.sml"*)
)
| 193 => ((*#line 164.13 "parser.lex"*)addString(stringBuf, "\011"); continue()(*#line 971.1 "parser.lex.sml"*)
)
| 196 => ((*#line 165.14 "parser.lex"*)addString(stringBuf, "\\"); continue()(*#line 973.1 "parser.lex.sml"*)
)
| 199 => ((*#line 166.14 "parser.lex"*)addString(stringBuf, "\""); continue()(*#line 975.1 "parser.lex.sml"*)
)
| 2 => ((*#line 84.19 "parser.lex"*)continue()(*#line 977.1 "parser.lex.sml"*)
)
| 203 => let val yytext=yymktext() in (*#line 167.18 "parser.lex"*)addChar
                    (
                      stringBuf,
		      Char.chr(Char.ord(String.sub(yytext,2))-Char.ord #"@")
                    );
		    continue()(*#line 984.1 "parser.lex.sml"*)
 end
| 207 => ((*#line 174.3 "parser.lex"*)error("illegal control escape; must be one of \
	  \@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_",yypos,yypos+2);
	 continue()(*#line 988.1 "parser.lex.sml"*)
)
| 21 => ((*#line 88.18 "parser.lex"*)Tokens.COMMA(yypos,yypos+1)(*#line 990.1 "parser.lex.sml"*)
)
| 212 => let val yytext=yymktext() in (*#line 178.3 "parser.lex"*)let
    val x = Char.ord(String.sub(yytext,1))*100
	    +Char.ord(String.sub(yytext,2))*10
	    +Char.ord(String.sub(yytext,3))
	    -((Char.ord #"0")*111)
  in
    if x>255
    then error ("illegal ascii escape",yypos,yypos+4)
    else addChar(stringBuf, Char.chr x);
    continue()
  end(*#line 1002.1 "parser.lex.sml"*)
 end
| 214 => ((*#line 189.11 "parser.lex"*)error ("illegal string escape",yypos,yypos+1); continue()(*#line 1004.1 "parser.lex.sml"*)
)
| 216 => ((*#line 191.10 "parser.lex"*)error ("illegal non-printing character in string",yypos,yypos+1);
             continue()(*#line 1007.1 "parser.lex.sml"*)
)
| 23 => ((*#line 89.18 "parser.lex"*)Tokens.LBRACE(yypos,yypos+1)(*#line 1009.1 "parser.lex.sml"*)
)
| 238 => let val yytext=yymktext() in (*#line 194.21 "parser.lex"*)addString(stringBuf,yytext); continue()(*#line 1011.1 "parser.lex.sml"*)
 end
| 243 => ((*#line 196.14 "parser.lex"*)onNewLine yypos; continue()(*#line 1013.1 "parser.lex.sml"*)
)
| 246 => ((*#line 197.14 "parser.lex"*)continue()(*#line 1015.1 "parser.lex.sml"*)
)
| 248 => ((*#line 198.12 "parser.lex"*)YYBEGIN S; stringStart := yypos; continue()(*#line 1017.1 "parser.lex.sml"*)
)
| 25 => ((*#line 90.18 "parser.lex"*)Tokens.RBRACE(yypos,yypos+1)(*#line 1019.1 "parser.lex.sml"*)
)
| 250 => ((*#line 199.11 "parser.lex"*)error ("unclosed string",!stringStart,yypos);
		    YYBEGIN INITIAL;
                    Tokens.STRING(makeString stringBuf,!stringStart,yypos+1)(*#line 1023.1 "parser.lex.sml"*)
)
| 27 => ((*#line 91.18 "parser.lex"*)Tokens.LBRACKET(yypos,yypos+1)(*#line 1025.1 "parser.lex.sml"*)
)
| 30 => ((*#line 92.19 "parser.lex"*)Tokens.VECTORSTART(yypos,yypos+1)(*#line 1027.1 "parser.lex.sml"*)
)
| 32 => ((*#line 93.18 "parser.lex"*)Tokens.RBRACKET(yypos,yypos+1)(*#line 1029.1 "parser.lex.sml"*)
)
| 34 => ((*#line 94.18 "parser.lex"*)Tokens.SEMICOLON(yypos,yypos+1)(*#line 1031.1 "parser.lex.sml"*)
)
| 36 => ((*#line 95.18 "parser.lex"*)inc comLevel; Tokens.LPAREN(yypos,yypos+1)(*#line 1033.1 "parser.lex.sml"*)
)
| 38 => ((*#line 96.18 "parser.lex"*)dec comLevel; Tokens.RPAREN(yypos,yypos+1)(*#line 1035.1 "parser.lex.sml"*)
)
| 40 => ((*#line 97.19 "parser.lex"*)Tokens.DOT(yypos,yypos+1)(*#line 1037.1 "parser.lex.sml"*)
)
| 44 => ((*#line 98.21 "parser.lex"*)Tokens.DOTDOTDOT(yypos,yypos+3)(*#line 1039.1 "parser.lex.sml"*)
)
| 52 => let val yytext=yymktext() in (*#line 100.8 "parser.lex"*)TokTable.checkTyvar(yytext,yypos)(*#line 1041.1 "parser.lex.sml"*)
 end
| 55 => let val yytext=yymktext() in (*#line 101.27 "parser.lex"*)TokTable.checkId(yytext, yypos)(*#line 1043.1 "parser.lex.sml"*)
 end
| 66 => let val yytext=yymktext() in (*#line 102.29 "parser.lex"*)TokTable.checkSymId(yytext,yypos)(*#line 1045.1 "parser.lex.sml"*)
 end
| 7 => ((*#line 85.20 "parser.lex"*)onNewLine yypos; continue()(*#line 1047.1 "parser.lex.sml"*)
)
| 75 => let val yytext=yymktext() in (*#line 103.29 "parser.lex"*)TokTable.checkSymId(yytext,yypos)(*#line 1049.1 "parser.lex.sml"*)
 end
| 95 => let val yytext=yymktext() in (*#line 104.21 "parser.lex"*)Tokens.REAL(yytext,yypos,yypos+size yytext)(*#line 1051.1 "parser.lex.sml"*)
 end
| 98 => let val yytext=yymktext() in (*#line 105.26 "parser.lex"*)Tokens.INT(atoi(yytext, 0),yypos,yypos+size yytext)(*#line 1053.1 "parser.lex.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof yyarg
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
in continue end
  in lex
  end
end
