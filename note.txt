
=======
Caveats
=======

1. List cons operator (::)
    - No infix operator except this
    - Redefine this may cause some problem.

2. Each function pattern needs an appropriate type annotation.
    - This restriction will be lifted when type inference is introduced.

====
Memo
====

* Query declarations
  => Functional user interface
     No extra keyword is needed.

* Automatic in/out mode inference
  => Doubtful for its usefulness
  => Another option is to use in/out mode declaration as
     `directness' of unification so that logic variable
     can be explicitly pattern-matched. 

* Unification of incomparable types such as function type and real type. 

  => If the type is in "Center", pattern matching will be used. There will
     be no problem even when the type is incomparable.
  => If the type is in "Boundary", op= will be used for equality check. 
     Unification of two values of incomparable "Boundary" type will always
     fail. Is there any better option?
  
* Negation
  => Use equality for primitive types such as integer and string

  Ex. Maintain a list of primitive values which a variable for
      primitive must not be unified with. 


  => Use SML's or-pattern for datatypes

  Ex. Given datatype D = C1 | ... | Cn,

      ~ Ci <==> (C1 | ... | Ci-1 | Ci+1 | ... | Cn)


* Predicates on datatype declaration
  => Ex. datatype D = C of D' list
            where D' list is not a nil list. 

* Interface with ML's functions
  => Use the embedding/projection idea. 
     f is implemented as "embedding o f o projection",

* Higher-order functions
  => One (simple?) option is to allow the use of functions
     in expression but not in patterns. This option seems
     to avoid unification over functions.

  => Or simply extend projection/embedding pairs to higher-order functions

* ML-like type inference

* Support for cut operator

* User-defined equality
  Ex. real

* Support for printing terms with uninstantiated variables
  => Provide a way to use PRINTL<datatype>, which is automatically
     generated by the compiler, as a plain function converting 
     a lifted value of <datatype> into a string

  => Calling a function f is implemented as "embedding o f o projection",
     but, in this case, f should be implemented as itself "f".

* Support for qualified identifiers

* Support fo modular description

* Support for name generation
  => Nominal logic?

* Support for control of search strategies
  => depth-first <--- something in-between ---> breadth-first

     probablistic control
     - 1.0 => dfs
     - 0.5 => depth-first, breadth-first, depth-first, breadth-first, ...
     - 0.0 => bfs

=====================================
Type-directed generation of functions
=====================================

For each type, SMLOG generates

  - PROJ/EMBED
  - OCCUR/UNIFY
  - PRINT

For example, suppose a simple form of datatype

  - datatype 'a D = C of 'a

PROJ_D  = lam (dictEmbed_a,dictpProj_a). 
          lam x.
           case x of
             L_C y   => C (dict_a y)
           | L_var y => raise SMLOG.ProjectionError

EMBED_D = lam (dictEmbed_a,dictProj_a).
          lam x.
           case x of
             C y => L_C (dictEmbed_a y)

OCCUR_D = lam dictOccur_a.
          lam y.
          lam x.
           case x of
             L_var z => z=y
           | L_C z   => dictOccur_a y z

UNIFY_D = lam (dictUnify_a, dictOccur_a).
          lam (L_var x1, L_var x2) subst => ...
            | (L_var x1, L_C x2) subst => ...
            | (L_C x1, L_var x2) subst => ...
            | (L_C x1, L_C x2) subst => ...


As for function types,

datatype ('a,'b) Lmigt = Lmigt of string | THEmigt of ('a -> 'b)

EMBEDLmigt : ((a1 -> a2, a2 -> a1),(b1 -> b2, b2 -> b1)) -> (a1 -> b1) -> (a2,b2) Lmigt

PROJLmigt  : ((a1 -> a2, a2 -> a1),(b1 -> b2, b2 -> b1)) -> (a2,b2) Lmigt -> (a1 -> b1) 

==========
Discussion
==========

* Embed/Proj pair에 관련된 기존의 작업들과 달리 논리 프로그래밍에서는
  Proj의 exception을 다룰수 있는 방법을 프로그래머에게 제시해야 하는
  점이 큰 차이점이다. proj의 exception을 다뤄야 하는 경우 제시한(할?)
  방법을 사용할 수 있겠다.

  예를 들어,

  projection이 항상 성공하는 경우 (checker)

    proj : INT -> int option

    proj (INT i) = Just i
    proj (VAR x) = Nothing  (* will never be chosen *)

  projection이 항상 성공하지는 않는 경우

    i) VAR의 경우 임의의 값을 결정해도 무관한 경우

    proj : INT -> int 

    proj (INT i) = i
    proj (VAR x) = 0 (* or random() *)

    ii) 특정 외부 solver가 있어서 VAR를 VAR 그대로 유지할 경우

    proj : INT -> EXP

    proj (INT i) = EXP_Int i
    proj (VAR x) = EXP_Var x

* Value를 통한 함수형 언어와 논리형 언어를 혼합

* 함수형 언어에서 Testing 방법으로 논리형 언어 프레임워크를 사용.

====================
Test data generation
====================

* By defining evaluation rules
* By adding depth parameter
* By adding typing rules

How can we provide answers for the following issues

* Coverage 

  - It seems to be easy for SMLOG to generate all data bounded by some depth.

* Efficiency of test data generation (one test data from each class)

  - First, define an ordering among terms

    For example,

    - Forall X, X <= Var S.

    - Var S = Var T whatever S and T are.

    - Con (H,T) <= Var S
      Con (H,Con(H',Var S)) <= Con (H,Var T)
    - Nil <= Nil

  - Second, how can we exploit this ordering relation in SMLOG?

    - Suppose we have an operator ensuring this ordering. What is the
      relationship between var in Prolog and this operator?

* Omnibus

  - How can we verify test results for each test data?

* Primitives and libraries

  - How can we define predicates for primitives and libraries?

  - The interface mechanism of SMLOG with functions could lessen this
    problem. 

    One possible interpretation:

      fun + : (int : in, int : in, int : out)

      => both arguments should be given as ground terms, and the
         result with them is also a ground term.

      fun + : (int : inout, int : inout, int : inout)

      => both arguments and the result of f1 are all either a variable
         or a ground term.

  - 

* Conversion of relations into functions.

fun K : (alpha, beta -> alpha)

fun K (X, F).
     where fun F : (beta, alpha)
           fun F (Y, X).
     end


 - In the above example, F is defined as a relation on beta and
   alpha. However, F is placed in the position of the second term of
   another relation K; F is a term which is a function of beta to
   alpha.

 - To coerce a relation into a function, the relation should be
   binary.

 - Now our situation becomes complicated because of the possibility of
   the presence of uninstantiated free variable in a function.

