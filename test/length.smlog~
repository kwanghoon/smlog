
type label = string

datatype Constraint = Plus of int * int * int     (* X + Y = Z *)
                    | Length of int list * int
                    | Edge of label * label

type Constraints = Constraint list

fun op+ : (int * int : in, int : out)

fun op@ : (Constraints * Constraints : in, Constraints : out)

fun length : (int list, int, Constraint list)

fun length ([], 0, [Edge ("length","nil")]).

    length (X :: XS, N, [Edge ("length", "cons"), Plus (N,1,M), Length (XS,M)]).

(*

    ([],       0,  []) 
/\  (V5 :: V6, V1, [Plus (V1,1,V3), Length (V6,V3)])

*)

fun member : (Constraint, Constraint list)

fun member (X, X::XS).

    member (X, Y::XS) = member (X, XS).

fun query : (int list, int, Constraints list)

fun query (X,Y,[C]) =

      length (X,Y,C), member (Edge ("length", "nil"),C).

    query (X,Y,C1::C2) = 

      length (X,Y,C1), member (Length (W,Z),C1), query (W,Z,C2).

